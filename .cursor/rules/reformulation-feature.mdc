---
description: Quand besoin de travailler sur la feature reformulation 
globs: 
alwaysApply: false
---
# Fonctionnalit√© de Reformulation

## Vue d'ensemble
La reformulation est la fonctionnalit√© principale permettant √† la correctrice de g√©n√©rer plusieurs versions d'une phrase avec diff√©rents degr√©s de modification.

## Interface Utilisateur ([app/reformulation/page.tsx](mdc:app/reformulation/page.tsx))

### Composants de l'interface
1. **Zone de saisie**: Textarea avec boutons d'action (effacer, coller)
2. **Slider de degr√©**: EmojiSlider pour choisir l'intensit√© (1-3)
3. **Slider de versions**: Nombre de versions √† g√©n√©rer (1-5)
4. **R√©sultats**: Affichage des reformulations avec boutons de copie
5. **Historique**: Sauvegarde locale des reformulations pr√©c√©dentes

### √âtats de l'interface
```typescript
const [isLoading, setIsLoading] = useState(false);
const [inputText, setInputText] = useState("");
const [results, setResults] = useState<string[]>([]);
const [versions, setVersions] = useState(1);
const [reformulationDegree, setReformulationDegree] = useState(2);
const [currentVersion, setCurrentVersion] = useState(0);
const [history, setHistory] = useState<HistoryEntry[]>([]);
```

## Logique de Reformulation

### Degr√©s de reformulation ([utils/emoji-degree.tsx](mdc:utils/emoji-degree.tsx))
- **Degr√© 1** üòä: Reformulation subtile, structure pr√©serv√©e
- **Degr√© 2** üòÑ: Reformulation simple, style pr√©serv√©  
- **Degr√© 3** ü§©: Reformulation compl√®te, structure et vocabulaire chang√©s

### Prompts adaptatifs
Le service adapte le prompt selon le degr√© choisi:
```typescript
private getPromptForDegree(degree: number): string {
  switch (degree) {
    case 1: return basePrompt + " Fais une reformulation tr√®s subtile...";
    case 2: return basePrompt + " Fais une reformulation simple...";
    case 3: return basePrompt + " Fais une reformulation en changeant...";
  }
}
```

### G√©n√©ration multiple
- G√©n√©ration s√©quentielle de plusieurs versions
- Chaque nouvelle version √©vite les pr√©c√©dentes
- D√©lai de 300ms entre les g√©n√©rations pour l'UX

## Int√©gration Tauri

### Presse-papiers
```typescript
import { writeText, readText } from "@tauri-apps/plugin-clipboard-manager";

// Coller du texte
const text = await readText();
if (text) setInputText(text);

// Copier une reformulation
await writeText(reformulatedText);
```

### Avantages desktop
- Acc√®s direct au presse-papiers syst√®me
- Pas de limitations browser pour le clipboard
- Performance native pour le traitement de texte

## Historique et Persistance

### Structure de l'historique
```typescript
interface HistoryEntry {
  input: string;
  versions: string[];
  timestamp: number;
}
```

### Sauvegarde locale ([services/storage.service.ts](mdc:services/storage.service.ts))
- Utilise localStorage pour la persistance
- Chargement automatique au d√©marrage
- Sauvegarde automatique √† chaque modification

## UX et Feedback

### Indicateurs visuels
- Loading spinner pendant la g√©n√©ration
- Compteur de version en cours
- Animation de copie avec feedback temporaire
- √âtats disabled pendant le traitement

### Gestion d'erreur
- Try/catch sur toutes les op√©rations async
- Messages d'erreur utilisateur-friendly
- Fallback gracieux en cas d'√©chec API

### Optimisations
- Nettoyage automatique des r√©ponses IA
- Patterns RegExp pour supprimer les artefacts
- Streaming pour un feedback temps r√©el

## Configuration IA

### Param√®tres OpenAI optimis√©s
- **Temperature**: 0.1 (coh√©rence)
- **Max tokens**: 40 (phrases courtes)
- **Frequency penalty**: 0.5 (√©viter r√©p√©titions)
- **Presence penalty**: 0.2 (diversit√© mod√©r√©e)

### Prompts sp√©cialis√©s
- Prompts adapt√©s au contexte de correction litt√©raire
- Pr√©servation du style artistique de l'auteur
- Instructions sp√©cifiques par degr√© de reformulation
