---
description: Firebase Storage Rules configuration and patterns. For docx files
alwaysApply: false
---

# Firebase Storage Rules - MSS Correction

## Architecture et Patterns

### Structure des fichiers

Les fichiers dans Firebase Storage suivent cette structure :

```
/{userEmail}/{filename}    # Fichiers clients
/admin/{filename}          # Commandes manuelles
```

### R√®gles actuelles

```javascript
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Fichiers utilisateur - propri√©taire OU admin par email
    match /{userEmail}/{allPaths=**} {
      allow read, write: if request.auth != null &&
        (request.auth.token.email == userEmail ||
         request.auth.token.email == 'oceane.musso15@gmail.com');
    }

    // Commandes manuelles
    match /admin/{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}
```

## Probl√©matiques et Solutions

### ‚ö†Ô∏è Email admin hardcod√©

**Probl√®me** : L'email admin `oceane.musso15@gmail.com` est hardcod√© dans les r√®gles.
**Raison** : Firebase Storage Rules ne permettent PAS de faire des `get()` vers Firestore pour r√©cup√©rer les r√¥les dynamiquement.

### üö´ Limitations des Storage Rules

Contrairement aux Firestore Rules, les Storage Rules :

- Ne peuvent PAS acc√©der √† Firestore avec `get()`
- N'ont acc√®s qu'au token JWT (`request.auth.token`)
- Sont plus limit√©es en fonctionnalit√©s

### ‚úÖ Alternatives possibles

#### Option 1: Custom Claims (recommand√©)

Ajouter le r√¥le dans le JWT via Cloud Functions :

```javascript
// Dans les r√®gles Storage
allow read, write: if request.auth != null &&
  (request.auth.token.email == userEmail ||
   request.auth.token.role == 'admin');
```

#### Option 2: Liste d'emails (actuel)

Maintenir une liste d'emails admins dans les r√®gles (dette technique assum√©e).

#### Option 3: Acc√®s global temporaire

Pour debug uniquement :

```javascript
match /{allPaths=**} {
  allow read: if request.auth != null;
}
```

## Cas d'usage

### Upload de fichiers

- **Service principal** : `${user.email}/${filename}` (service-stepper.tsx)
- **Commandes manuelles** : `admin/manual-orders/${timestamp}_${email}_${filename}`

### T√©l√©chargement

- **Clients** : Acc√®s uniquement √† leurs fichiers
- **Admins** : Acc√®s √† tous les fichiers clients pour correction
- **Pattern** : `downloadFile()` dans storage-provider.tsx

## S√©curit√©

### Authentification requise

Tous les acc√®s n√©cessitent `request.auth != null`.

### Isolation par email

Chaque client acc√®de uniquement √† ses fichiers via le pattern `/{userEmail}/`.

### Acc√®s admin

N√©cessaire pour que les correcteurs puissent t√©l√©charger les fichiers clients.

## TODO / Am√©liorations futures

1. **Migrer vers Custom Claims** pour √©viter l'email hardcod√©
2. **Ajouter logging** des acc√®s Storage
3. **Consid√©rer la rotation** des emails admin
